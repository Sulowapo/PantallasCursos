@page "/cursos"
@rendermode InteractiveServer
@using System.IO
@using System.Globalization
@using System.Text

<h1 class="page-title">Gestión de Cursos</h1>

<div class="intro-container">
    <div class="card">
        <div class="card-body">
            <h5 class="card-title">Administración de Cursos en iVirtual</h5>
            <p class="card-text">
                Esta herramienta le permite gestionar los cursos disponibles por departamento.
                Seleccione un departamento, marque los cursos que desea activar en la plataforma iVirtual y guarde los cambios.
                Los cursos activados serán inmediatamente accesibles para los estudiantes en la plataforma.
            </p>
            <p class="card-text">
                <strong>Instrucciones:</strong>
            </p>
            <ol>
                <li>Seleccione un departamento del menú desplegable</li>
                <li>Haga clic en "Buscar" para ver los cursos disponibles</li>
                <li>Marque las casillas de los cursos que desea activar</li>
                <li>Haga clic en "Guardar Cambios" para aplicar las modificaciones</li>
            </ol>
        </div>
    </div>
</div>

<style>
    .intro-container {
        margin-bottom: 30px;
    }

    .button-container {
        margin-top: 20px;
        text-align: right;
    }

    .submit-button {
        background-color: #007bff;
        color: white;
        border: none;
        padding: 8px 16px;
        border-radius: 4px;
        cursor: pointer;
    }

    .submit-button:hover {
        background-color: #0069d9;
    }

    table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
    }

    th, td {
        padding: 10px;
        border: 1px solid #ddd;
        text-align: left;
    }

    th {
        background-color: #f2f2f2;
    }

    tr:hover {
        background-color: #f5f5f5;
    }

    .sortable {
        cursor: pointer;
    }

    .sortable:hover {
        background-color: #e0e0e0;
    }

    .sort-icon {
        margin-left: 5px;
        font-size: 0.8em;
    }
</style>

<div class="form-group">
    <label for="department">Departamento:</label>
    <select id="department" @bind="selectedDepartment">
        <option value="1">Biotecnología y Ciencias Alimentarias</option>
        <option value="2">Ciencias Agronómicas y Veterinarias</option>
        <option value="3">Ciencias del Agua y Medio Ambiente</option>
        <option value="4">Ciencias Administrativas</option>
        <option value="5">Computación y Diseño</option>
        <option value="6">Contaduría y Finanzas</option>
        <option value="7">Desarrollo Académico</option>
        <option value="8">Educación</option>
        <option value="9">Gestión y Apoyo a Cuerpos Académicos</option>
        <option value="10">Gestión y Apoyo a Programas Educativos</option>
        <option value="11">Ingeniería Civil y Arquitectura</option>
        <option value="12">Ingeniería Eléctrica y Electrónica</option>
        <option value="13">Ingeniería Industrial</option>
        <option value="14">Matemáticas</option>
        <option value="15">Psicología</option>
        <option value="16">Sociocultural</option>
    </select>
    <button @onclick="Search">Buscar</button>
</div>
<table>
    <thead>
        <tr>
            <th class="sortable" @onclick="SortByName">
                ID Curso
                @if (currentSortColumn == "ID Curso")
                {
                    <span class="sort-icon">@(sortAscending ? "↑" : "↓")</span>
                }
            </th>
            <th class="sortable" @onclick="SortByName">
                Nombre del Curso
                @if (currentSortColumn == "Nombre clase")
                {
                    <span class="sort-icon">@(sortAscending ? "↑" : "↓")</span>
                }
            </th>
            <th class="sortable" @onclick="SortByInstructor">
                Instructor
                @if (currentSortColumn == "Nom 1")
                {
                    <span class="sort-icon">@(sortAscending ? "↑" : "↓")</span>
                }
            </th>
            <th>Aula</th>
            <th>Horario</th>
            <th>Activado en iVirtual</th>
        </tr>
    </thead>
    <tbody>
        @if (courses != null && courses.Any())
        {
            @foreach (var course in courses)
            {
                <tr>
                    <td>@course.Id</td>
                    <td>@course.Name</td>
                    <td>@course.Instructor</td>
                    <td>@course.Aula</td>
                    <td>@course.Horario</td>
                    <td><input type="checkbox" @bind="course.IsActive" /></td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="6">No hay cursos disponibles. @(File.Exists(Path.Combine(Directory.GetCurrentDirectory(), "resources", "cat_EM2025.csv")) ? $"Archivo encontrado pero no hay cursos para el departamento seleccionado. Verifique la estructura del CSV." : "Archivo no encontrado.")</td>
            </tr>
        }
    </tbody>
</table>

@if (hasMoreCourses)
{
    <div class="text-center mt-3 mb-3">
        <button class="btn btn-outline-primary" @onclick="LoadMoreCourses">
            Ver más cursos
        </button>
    </div>
}

<div class="button-container">
    <button class="submit-button" @onclick="ShowConfirmationDialog">Guardar Cambios</button>
</div>

<!-- Confirmation Modal -->
<div class="modal fade @(_showConfirmDialog ? "show" : "")" id="confirmationModal" tabindex="-1" role="dialog"
     style="display: @(_showConfirmDialog ? "block" : "none");"
     aria-labelledby="confirmationModalLabel" aria-hidden="@(!_showConfirmDialog)">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmationModalLabel">Confirmar Cambios</h5>
                <button type="button" class="btn-close" @onclick="CloseConfirmationDialog" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                ¿Desea guardar los cambios? Los cursos activados se verán reflejados en el sistema iVirtual.
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseConfirmationDialog">Cancelar</button>
                <button type="button" class="btn btn-primary" @onclick="SaveChanges">Aceptar</button>
            </div>
        </div>
    </div>
</div>

<!-- Success Modal -->
<div class="modal fade @(_showSuccessDialog ? "show" : "")" id="successModal" tabindex="-1" role="dialog"
     style="display: @(_showSuccessDialog ? "block" : "none");"
     aria-labelledby="successModalLabel" aria-hidden="@(!_showSuccessDialog)">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="successModalLabel">Operación Exitosa</h5>
                <button type="button" class="btn-close" @onclick="CloseSuccessDialog" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Los cambios fueron guardados exitosamente.
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" @onclick="CloseSuccessDialog">Aceptar</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal Backdrop -->
@if (_showConfirmDialog || _showSuccessDialog)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    private string selectedDepartment = "5"; // Computación y Diseño por defecto
    private List<Course> allCourses = new(); // Todos los cursos cargados del CSV
    private List<Course> courses = new(); // Cursos mostrados actualmente
    private bool _showConfirmDialog = false;
    private bool _showSuccessDialog = false;
    private int pageSize = 50; // Tamaño de cada lote
    private int currentPage = 0; // Página actual
    private bool hasMoreCourses = false; // Indica si hay más cursos para cargar

    // Sorting properties
    private string currentSortColumn = "";
    private bool sortAscending = true;

    protected override void OnInitialized()
    {
        LoadCoursesFromCSV(); // Cargar cursos desde CSV al iniciar
    }

    private void Search()
    {
        Console.WriteLine($"Search clicked with department: {selectedDepartment}");
        // Cargar cursos desde CSV basado en el departamento seleccionado
        LoadCoursesFromCSV();
        StateHasChanged();
    }

    private void LoadMoreCourses()
    {
        currentPage++;
        int startIndex = currentPage * pageSize;
        int endIndex = Math.Min(startIndex + pageSize, allCourses.Count);
        
        if (startIndex < allCourses.Count)
        {
            // Añadir el siguiente lote de cursos a la lista mostrada
            courses.AddRange(allCourses.Skip(startIndex).Take(pageSize));
            
            // Verificar si hay más cursos para cargar
            hasMoreCourses = endIndex < allCourses.Count;
            
            Console.WriteLine($"Cargados cursos {startIndex + 1} a {endIndex} de {allCourses.Count}");
            StateHasChanged();
        }
    }

    private void ShowConfirmationDialog()
    {
        _showConfirmDialog = true;
    }

    private void CloseConfirmationDialog()
    {
        _showConfirmDialog = false;
    }

    private void CloseSuccessDialog()
    {
        _showSuccessDialog = false;
    }

    private void SortByName()
    {
        SortBy("Name");
    }

    private void SortByInstructor()
    {
        SortBy("Instructor");
    }

    private void SortBy(string columnName)
    {
        // If clicking the same column, toggle sort direction
        if (currentSortColumn == columnName)
        {
            sortAscending = !sortAscending;
        }
        else
        {
            // New column, default to ascending
            currentSortColumn = columnName;
            sortAscending = true;
        }

        // Apply sorting based on column and direction
        switch (columnName)
        {
            case "Name":
                allCourses = sortAscending
                    ? allCourses.OrderBy(c => c.Name).ToList()
                    : allCourses.OrderByDescending(c => c.Name).ToList();
                break;
            case "Instructor":
                allCourses = sortAscending
                    ? allCourses.OrderBy(c => c.Instructor).ToList()
                    : allCourses.OrderByDescending(c => c.Instructor).ToList();
                break;
        }
        
        // Reiniciar la paginación
        currentPage = 0;
        
        // Actualizar la lista mostrada
        courses = allCourses.Take(pageSize).ToList();
        
        // Verificar si hay más cursos para cargar
        hasMoreCourses = allCourses.Count > pageSize;
    }

    private void SaveChanges()
    {
        // Close confirmation dialog
        _showConfirmDialog = false;

        // Actualizar la lista completa de cursos
        foreach (var displayedCourse in courses)
        {
            var originalCourse = allCourses.FirstOrDefault(c => c.Id == displayedCourse.Id && c.Name == displayedCourse.Name);
            if (originalCourse != null)
            {
                originalCourse.IsActive = displayedCourse.IsActive;
            }
        }

        // Eliminar cursos marcados como activos de la lista completa
        allCourses = allCourses.Where(c => !c.IsActive).ToList();
        
        // Actualizar la lista mostrada
        int startIndex = currentPage * pageSize;
        int endIndex = Math.Min(startIndex + pageSize, allCourses.Count);
        courses = allCourses.Skip(startIndex).Take(pageSize).ToList();
        
        // Verificar si hay más cursos para cargar
        hasMoreCourses = endIndex < allCourses.Count;

        // Show success dialog
        _showSuccessDialog = true;
    }

    private void LoadCoursesFromCSV()
    {
        allCourses.Clear();
        courses.Clear();
        currentPage = 0;
        
        try
        {
            string filePath = Path.Combine(Directory.GetCurrentDirectory(), "resources", "cat_EM2025.csv");
            Console.WriteLine($"Buscando archivo en: {filePath}");
            
            if (File.Exists(filePath))
            {
                Console.WriteLine("Archivo encontrado, procediendo a leer");
                
                // Usar FileShare.ReadWrite para permitir acceso al archivo incluso si está siendo usado
                string[] lines;
                using (var fileStream = new FileStream(filePath, FileMode.Open, FileAccess.Read, FileShare.ReadWrite))
                using (var reader = new StreamReader(fileStream, Encoding.GetEncoding("ISO-8859-1")))
                {
                    // Leer todo el contenido del archivo
                    string content = reader.ReadToEnd();
                    lines = content.Split(new[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries);
                }
                
                Console.WriteLine($"Líneas leídas: {lines.Length}");
                
                // Diccionario para rastrear IDs de combinación ya procesados
                Dictionary<string, bool> idCombProcesados = new Dictionary<string, bool>();
                
                // Buscar cursos basados en el ID del curso o nombre de la materia
                for (int i = 2; i < lines.Length; i++) // Empezar desde la línea 2 (después de los encabezados)
                {
                    string line = lines[i];
                    if (string.IsNullOrWhiteSpace(line)) continue;
                    
                    // Procesar la línea correctamente, teniendo en cuenta las comas dentro de comillas
                    List<string> fields = new List<string>();
                    bool inQuotes = false;
                    StringBuilder field = new StringBuilder();
                    
                    for (int j = 0; j < line.Length; j++)
                    {
                        char c = line[j];
                        
                        if (c == '"')
                        {
                            inQuotes = !inQuotes;
                        }
                        else if (c == ',' && !inQuotes)
                        {
                            fields.Add(field.ToString().Trim());
                            field.Clear();
                        }
                        else
                        {
                            field.Append(c);
                        }
                    }
                    
                    // Añadir el último campo
                    fields.Add(field.ToString().Trim());
                    
                    // Verificar que haya suficientes campos
                    if (fields.Count < 30) continue;
                    
                    // Obtener los campos relevantes
                    string idCurso = fields.Count > 3 ? fields[3].Trim() : "";
                    string nombreCurso = fields.Count > 6 ? fields[6].Trim() : "";
                    string instructor = fields.Count > 12 ? fields[12].Trim() : "";
                    string estadoClase = fields.Count > 14 ? fields[14].Trim() : "";
                    string idComb = fields.Count > 8 ? fields[8].Trim() : "";
                    string materia = fields.Count > 27 ? fields[27].Trim() : "";
                    
                    // Obtener datos para las nuevas columnas
                    string aula = fields.Count > 13 ? fields[13].Trim() : "";
                    
                    // Datos para el horario
                    string horaInicio = fields.Count > 16 ? fields[16].Trim() : "";
                    string horaFin = fields.Count > 17 ? fields[17].Trim() : "";
                    bool lunes = fields.Count > 18 && fields[18].Trim().Equals("Y", StringComparison.OrdinalIgnoreCase);
                    bool martes = fields.Count > 19 && fields[19].Trim().Equals("Y", StringComparison.OrdinalIgnoreCase);
                    bool miercoles = fields.Count > 20 && fields[20].Trim().Equals("Y", StringComparison.OrdinalIgnoreCase);
                    bool jueves = fields.Count > 21 && fields[21].Trim().Equals("Y", StringComparison.OrdinalIgnoreCase);
                    bool viernes = fields.Count > 22 && fields[22].Trim().Equals("Y", StringComparison.OrdinalIgnoreCase);
                    bool sabado = fields.Count > 23 && fields[23].Trim().Equals("Y", StringComparison.OrdinalIgnoreCase);
                    bool domingo = fields.Count > 24 && fields[24].Trim().Equals("Y", StringComparison.OrdinalIgnoreCase);
                    
                    // Formatear el horario
                    string horario = FormatearHorario(horaInicio, horaFin, lunes, martes, miercoles, jueves, viernes, sabado, domingo);
                    
                    // Validación 1: Filtrar secciones canceladas
                    if (estadoClase.Contains("Sección Cancelada", StringComparison.OrdinalIgnoreCase))
                    {
                        Console.WriteLine($"Sección cancelada ignorada: ID={idCurso}, Nombre={nombreCurso}");
                        continue;
                    }
                    
                    // Validación 2: Verificar si ya procesamos un curso con el mismo ID de combinación
                    if (!string.IsNullOrEmpty(idComb) && idCombProcesados.ContainsKey(idComb))
                    {
                        Console.WriteLine($"Curso combinado ignorado: ID={idCurso}, Nombre={nombreCurso}, ID Comb={idComb}");
                        continue;
                    }
                    
                    // Marcar este ID de combinación como procesado
                    if (!string.IsNullOrEmpty(idComb))
                    {
                        idCombProcesados[idComb] = true;
                    }
                    
                    // Formatear el nombre del instructor (convertir "Apellido, Nombre" a "Nombre Apellido")
                    if (instructor.Contains(","))
                    {
                        string[] nombrePartes = instructor.Split(',');
                        if (nombrePartes.Length >= 2)
                        {
                            instructor = $"{nombrePartes[1].Trim()} {nombrePartes[0].Trim()}";
                        }
                    }
                    
                    // Filtrar por departamento basado en el ID del curso o materia
                    bool esCursoDeComputacion = false;
                    
                    // Para Computación y Diseño (departamento 5)
                    if (selectedDepartment == "5")
                    {
                        // Verificar si el ID del curso o la materia contienen palabras clave de computación
                        esCursoDeComputacion = 
                            idCurso.Contains("ISW", StringComparison.OrdinalIgnoreCase) || // Ingeniería de Software
                            idCurso.Contains("IDS", StringComparison.OrdinalIgnoreCase) || // Diseño de Software
                            idCurso.Contains("IIS", StringComparison.OrdinalIgnoreCase) || // Ingeniería en Sistemas
                            idCurso.Contains("LDG", StringComparison.OrdinalIgnoreCase) || // Licenciatura en Diseño Gráfico
                            nombreCurso.Contains("Comput", StringComparison.OrdinalIgnoreCase) ||
                            nombreCurso.Contains("Program", StringComparison.OrdinalIgnoreCase) ||
                            nombreCurso.Contains("Diseño", StringComparison.OrdinalIgnoreCase) ||
                            nombreCurso.Contains("Software", StringComparison.OrdinalIgnoreCase) ||
                            materia.Contains("Comput", StringComparison.OrdinalIgnoreCase) ||
                            materia.Contains("Diseño", StringComparison.OrdinalIgnoreCase);
                    }
                    
                    if (esCursoDeComputacion)
                    {
                        Console.WriteLine($"Curso de computación encontrado: ID={idCurso}, Nombre={nombreCurso}, Instructor={instructor}");
                        
                        // Añadir el curso a la lista si no existe ya
                        if (!allCourses.Any(c => c.Id.ToString() == idCurso && c.Name == nombreCurso))
                        {
                            allCourses.Add(new Course
                            {
                                Id = int.TryParse(idCurso, out int id) ? id : 0,
                                Name = nombreCurso,
                                Instructor = instructor.Replace("\"", ""),
                                Aula = aula,
                                Horario = horario,
                                IsActive = false,
                                IdComb = idComb
                            });
                        }
                    }
                }
                
                Console.WriteLine($"Total de cursos cargados: {allCourses.Count}");
                
                // Cargar el primer lote de cursos
                courses = allCourses.Take(pageSize).ToList();
                
                // Verificar si hay más cursos para cargar
                hasMoreCourses = allCourses.Count > pageSize;
                
                // Si no se encontraron cursos, cargar datos de ejemplo
                if (allCourses.Count == 0)
                {
                    Console.WriteLine("No se encontraron cursos en el CSV, cargando datos de ejemplo");
                    LoadCourses();
                    hasMoreCourses = false;
                }
            }
            else
            {
                Console.WriteLine($"Archivo no encontrado: {filePath}");
                LoadCourses();
                hasMoreCourses = false;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar CSV: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
            LoadCourses();
            hasMoreCourses = false;
        }
    }

    private string FormatearHorario(string horaInicio, string horaFin, bool lunes, bool martes, bool miercoles, bool jueves, bool viernes, bool sabado, bool domingo)
    {
        // Formatear las horas (convertir de formato 24h a 12h con am/pm si es necesario)
        string horaInicioFormateada = FormatearHora(horaInicio);
        string horaFinFormateada = FormatearHora(horaFin);
        
        // Construir la cadena de días
        List<string> dias = new List<string>();
        if (lunes) dias.Add("Lu");
        if (martes) dias.Add("Ma");
        if (miercoles) dias.Add("Mi");
        if (jueves) dias.Add("Ju");
        if (viernes) dias.Add("Vi");
        if (sabado) dias.Add("Sa");
        if (domingo) dias.Add("Do");
        
        string diasFormateados = string.Join(",", dias);
        
        // Si no hay días o no hay horas, devolver cadena vacía
        if (string.IsNullOrEmpty(diasFormateados) || string.IsNullOrEmpty(horaInicioFormateada) || string.IsNullOrEmpty(horaFinFormateada))
        {
            return "No especificado";
        }
        
        // Formatear el horario completo
        return $"{diasFormateados} {horaInicioFormateada}-{horaFinFormateada}";
    }

    private string FormatearHora(string hora)
    {
        if (string.IsNullOrEmpty(hora)) return "";
        
        // Intentar parsear la hora
        if (TimeSpan.TryParse(hora, out TimeSpan timeSpan))
        {
            // Convertir a formato 12h con am/pm
            string periodo = timeSpan.Hours < 12 ? "am" : "pm";
            int hora12 = timeSpan.Hours % 12;
            if (hora12 == 0) hora12 = 12; // 0 horas en formato 12h es 12 am
            
            return $"{hora12}:{timeSpan.Minutes:D2} {periodo}";
        }
        
        // Si no se puede parsear, devolver la hora original
        return hora;
    }

    // Mantener el método original como respaldo
    private void LoadCourses()
    {
        // Código original para cargar cursos de ejemplo
        courses = selectedDepartment switch
        {
            "5" => new List<Course> // Computación y Diseño
            {
                new Course { Id = 501, Name = "Programación Avanzada", Instructor = "Omar Lopez", Aula = "E-305", Horario = "Lu,Mi,Vi 10:00 am-11:30 am", IsActive = false },
                new Course { Id = 502, Name = "Diseño de Interfaces", Instructor = "Ana Martínez", Aula = "D-201", Horario = "Ma,Ju 2:00 pm-4:00 pm", IsActive = false },
                new Course { Id = 503, Name = "Bases de Datos", Instructor = "Carlos Sánchez", Aula = "E-310", Horario = "Lu,Mi 8:00 am-10:00 am", IsActive = false },
                new Course { Id = 504, Name = "Inteligencia Artificial", Instructor = "Laura Gómez", Aula = "F-105", Horario = "Vi 3:00 pm-7:00 pm", IsActive = false },
                new Course { Id = 505, Name = "Desarrollo Web", Instructor = "Roberto Díaz", Aula = "E-301", Horario = "Ma,Ju 10:00 am-12:00 pm", IsActive = false }
            },
            // Otros departamentos...
            _ => new List<Course>()
        };
        
        // Copiar a allCourses para mantener consistencia
        allCourses = new List<Course>(courses);
    }

    private class Course
    {
        public int Id { get; set; }
        public string? Name { get; set; }
        public string? Instructor { get; set; }
        public string? Aula { get; set; }
        public string? Horario { get; set; }
        public bool IsActive { get; set; }
        public string? IdComb { get; set; }
    }
}



















